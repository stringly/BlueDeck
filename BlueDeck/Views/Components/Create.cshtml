@model ComponentWithComponentListViewModel



<div class="col-xs-12 col-md-10 col-md-offset-1 col-lg-8 col-lg-offset-2 formContainer">
    @if (ViewBag.Status == "Warning!")
    {
        <div class="alert alert-danger alert-dismissible fade in">
            <a href="#" class="close" data-dismiss="alert" aria-label="close">&times;</a>
            <strong>Warning!</strong>
            <span>@ViewBag.Message</span>
        </div>
    }
    <div class="formHeader">
        <h4 class="formHeader-heading"><strong>Create Component</strong></h4>
        <p class="formHeader-description">
            A Component represents an organizational entity, such as a Bureau, Division, Section, etc.
        </p>
        <div>
            <a asp-action="Index"><i class="ion-md-arrow-round-back"></i> Back to List</a>
        </div>
    </div>
    <div class="row">
        <form asp-action="Create" asp-route-returnUrl="@ViewBag.ReturnUrl">
            <div asp-validation-summary="ModelOnly" class="text-danger"></div>
            @Html.HiddenFor(model => model.LineupPosition)
            <div class="col-md-12">
                <div class="row">
                    <div class="col-md-5 form-group">
                        <label asp-for="ComponentName" class="control-label"></label>
                        <input asp-for="ComponentName" class="form-control" />
                        <span asp-validation-for="ComponentName" class="text-danger"></span>
                    </div>
                    <div class="col-md-3 form-group">
                        <label asp-for="Acronym" class="control-label"></label>
                        <input asp-for="Acronym" class="form-control" />
                        <span asp-validation-for="Acronym" class="text-danger"></span>
                    </div>
                </div>
                <hr />
                <div class="row">
                    <div class="col-md-5 form-group">
                        <label asp-for="ParentComponentId" class="control-label"></label>
                        @Html.DropDownListFor(model => model.ParentComponentId,
                                                        new SelectList(Model.Components, "Id", "ComponentName"),
                                                        "Choose Parent Component",
                                                        new { @class = "form-control" })
                        <span asp-validation-for="ParentComponentId" class="text-danger"></span>
                    </div>
                    <div id="lineupSelectionTarget"></div>
                </div>
                <hr />
                <div class="row">
                    <div class="col-sm-4 form-group">
                        <a href="@ViewBag.ReturnUrl" class="btn btn-default">Cancel</a>
                        <a asp-action="Create" asp-route-returnUrl="@ViewBag.ReturnUrl" class="btn btn-warning">Reset</a>
                        <input type="submit" value="Create" class="btn btn-primary" />
                    </div>
                </div>
            </div>
        </form>
    </div>
</div>

<script type="text/javascript">
    // I need an onchange event for the ParentComponentId select
    $(document).ready(function () {
        //this will add * next to required label
        $('input[type=text],input[type=radio],input[type=checkbox],textarea,select,input[type=email],input[type=number]').each(function () {
            var req = $(this).attr('data-val-required');
            var exclude = $(this).attr('data-exclude');
            if (undefined != req && undefined == exclude) {
                var label = $('label[for="' + $(this).attr('id') + '"]');
                var text = label.text();
                if (text.length > 0) {
                    label.append('<span style="color:red"> *</span>');
                }
            }
        });
        if ($("#ParentComponentId").val() != "") {
            var val = $("#ParentComponentId").val();
            $.get("/Components/GetComponentLineupViewComponent", { parentComponentId: $("#ParentComponentId").val(), componentBeingEditedId: $("#ComponentId").val() }, function (data) {
                $("#lineupSelectionTarget").html(data);
                document.getElementById('lineupMoveUp').addEventListener('click', handleLineupMoveUp, false);
                document.getElementById('lineupMoveDown').addEventListener('click', handleLineupMoveDown, false);
            });
        }
        $("#ParentComponentId").on('change', function () {
            // retrieve the Lineup Interface view Component
            var container = $("#lineupSelectionTarget").empty();
            $.get("/Components/GetComponentLineupViewComponent", { parentComponentId: this.value }, function (data) {
                container.html(data);
                document.getElementById('lineupMoveUp').addEventListener('click', handleLineupMoveUp, false);
                document.getElementById('lineupMoveDown').addEventListener('click', handleLineupMoveDown, false);
                $("#LineupPosition").val($("#newComponentInsert").index());
            });
        });
        function handleLineupMoveUp() {
            // Grab the <ul>,
            // Find the "newPositionInsert"
            // move it up on the <ul>
            // update the #LineupPosition value to the new value
            var list = document.getElementById("lineupSelection");
            var newItem = document.getElementById('newComponentInsert');
            var previousItem = newItem.previousElementSibling;
            if (previousItem) {
                list.insertBefore(newItem, previousItem);
                $("#LineupPosition").val($("#newComponentInsert").index());
                console.log("New item is now at position: " + $("#newComponentInsert").index());
            } else {
                console.log("Item is already at the top of the list at position: " + $("#newComponentInsert").index());
            }
        }

        function handleLineupMoveDown() {
            var list = document.getElementById("lineupSelection");
            var newItem = document.getElementById('newComponentInsert');
            var nextItem = newItem.nextElementSibling;
            // check if the item is already at the bottom of the list
            if (nextItem) {
                // move the newInsert item up the list
                list.insertBefore(nextItem, newItem);
                // set the form field to the new position index
                $("#LineupPosition").val($("#newComponentInsert").index());
                console.log("New item is now at position: " + $("#newComponentInsert").index());
            } else {
                console.log("Item is already at the bottom of the list at position: " + $("#newComponentInsert").index());
            }
        }
    });

</script>
