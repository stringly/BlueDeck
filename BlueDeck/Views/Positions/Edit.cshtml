@model PositionWithComponentListViewModel
@{
    var IsAdmin = User.IsInRole("GlobalAdmin");
}
<div class="col-xs-12 col-md-10 col-md-offset-1 col-lg-8 col-lg-offset-2 formContainer">
    @if (ViewBag.Status == "Warning!")
    {
        <div class="alert alert-danger alert-dismissible fade in">
            <a href="#" class="close" data-dismiss="alert" aria-label="close">&times;</a>
            <strong>Warning!</strong>
            <span>@ViewBag.Message</span>
        </div>
    }
    <div class="formHeader">
        <h4 class="formHeader-heading"><strong>Edit Position</strong></h4>
        <p class="formHeader-description">
            Showing details for @Model.PositionName
        </p>
        <div>
            <a asp-action="Index"><i class="ion-md-arrow-round-back"></i> Back to List</a>
        </div>
    </div>
    <div class="row">
        <form asp-action="Edit" asp-route-returnUrl="@ViewBag.ReturnUrl">
            <div asp-validation-summary="ModelOnly" class="text-danger"></div>
            <input type="hidden" asp-for="PositionId" />
            @Html.HiddenFor(model => model.LineupPosition);
            <div class="col-md-12">
                <div class="row">
                    <div class="col-sm-5 form-group">
                        <label asp-for="PositionName" class="control-label"></label>
                        <input asp-for="PositionName" class="form-control" />
                        <span asp-validation-for="PositionName" class="text-danger"></span>
                    </div>
                    <div class="col-sm-3 form-group">
                        <label asp-for="Callsign" class="control-label"></label>
                        <input asp-for="Callsign" class="form-control" />
                        <span asp-validation-for="Callsign" class="text-danger"></span>
                    </div>
                    <div class="col-sm-4 form-group">
                        <label asp-for="JobTitle" class="control-label"></label>
                        <input asp-for="JobTitle" class="form-control" />
                        <span asp-validation-for="JobTitle" class="text-danger"></span>
                    </div>
                </div>
                <hr />
                <div class="row">
                    <div class="col-sm-10 form-group" style="margin-bottom:0px">
                        <div class="form-checkbox">
                            <label>
                                <input asp-for="IsUnique" /> @Html.DisplayNameFor(model => model.IsUnique)
                            </label>
                            <span class="note">
                                Only a single Member can be assigned.
                            </span>
                        </div>
                    </div>
                    <div class="col-sm-5 form-group" style="margin-bottom:0px">
                        <div class="form-checkbox">
                            <label>
                                <input asp-for="IsManager" /> @Html.DisplayNameFor(model => model.IsManager)
                            </label>
                            <span class="note">
                                This Position is the Manager for it's Component.
                            </span>
                        </div>
                    </div>
                    <div class="col-sm-5 form-group" style="margin-bottom:0px">
                        <div class="form-checkbox">
                            <label>
                                <input asp-for="IsAssistantManager" /> @Html.DisplayNameFor(model => model.IsAssistantManager)
                            </label>
                            <span class="note">
                                This Position is an Assistant Manager for it's Component.
                            </span>
                        </div>
                    </div>
                </div>
                <hr />
                <div class="row">
                    <div class="col-sm-5 form-group">
                        <label asp-for="ParentComponentId" class="control-label"></label>
                        @Html.DropDownListFor(model => model.ParentComponentId,
                                                        new SelectList(Model.Components, "Id", "ComponentName"),
                                                        "Choose Parent Component",
                                                        new { @class = "form-control" })
                        <span asp-validation-for="ParentComponentId" class="text-danger"></span>
                    </div>
                    <div class="col-sm-7 form-group" id="lineupWait" style="display:none">
                        <label class="control-label">Retrieving Positions</label><br />
                        <span class="glyphicon glyphicon-refresh spinning"></span>
                    </div>
                    <div id="lineupSelectionTarget"></div>
                </div>
                <hr />
                <div class="row">
                    <div class="form-group col-md-5">
                        <label class="control-label">Assign Member</label>
                        <div class="input-group">
                            @Html.DropDownList("AvailableMembers", new SelectList(Model.AvailableMembers, "MemberId", "MemberName"),
                                                            "Select Member to Assign",
                                                            new { @class = "form-control" })
                            <div class="input-group-btn">
                                <button class="btn btn-default" type="button" id="addSelectedMemberButton">
                                    <i class="glyphicon glyphicon-plus"></i> Assign
                                </button>
                            </div>
                        </div>
                        <span id="AvailableMembersMessage" class="text-danger"></span>
                    </div>
                    <div class="form-group col-md-7">
                        <label asp-for="CurrentMembers" class="control-label">Current Members</label><small id="currentMembersSubText">@(Model.IsUnique == true ? " (This is a unique position, so only a single member can be assigned.)" : " (Multiple members can be assigned.)")</small>
                        <ul class="list-unstyled" id="memberLineup">
                            @if (Model.CurrentMembers.Count() == 0)
                            {
                                <li id="noMembersItem"><span>No Current Members</span></li>
                            }
                            else
                            {
                                @for (int i = 0; i < Model.CurrentMembers.Count; i++)
                                {
                                    <li class="memberLineupItem" id="memberLineupItem-@i" data-memberid="@Model.CurrentMembers[i].MemberId">
                                        <button type="button" class="btn btn-small btn-danger unassignButton" data-membernumber="@i" data-positionid="@Model.PositionId" data-memberid="@Model.CurrentMembers[i].MemberId">
                                            <i class="glyphicon glyphicon-remove"></i>
                                        </button>
                                        <span>@Model.CurrentMembers[i].MemberName</span>
                                        <input type="hidden" asp-for="@Model.CurrentMembers[i].MemberId" />
                                        <input type="hidden" asp-for="@Model.CurrentMembers[i].MemberName" />
                                    </li>
                                }
                            }
                        </ul>
                    </div>
                </div>
                <hr />
                @if (IsAdmin)
                {
                    <div class="row">
                        <div class="col-sm-3 form-group">
                            <label asp-for="Creator" class="control-label"></label><br />
                            @Model.Creator
                        </div>
                        <div class="col-sm-3 form-group">
                            <label asp-for="CreatedDate" class="control-label"></label><br />
                            @Html.DisplayFor(model => model.CreatedDate)
                        </div>
                        <div class="col-sm-3 form-group">
                            <label asp-for="LastModifiedBy" class="control-label"></label><br />
                            @Model.LastModifiedBy
                        </div>
                        <div class="col-sm-3 form-group">
                            <label asp-for="LastModified" class="control-label"></label><br />
                            @Html.DisplayFor(model => model.LastModified)
                        </div>
                    </div>
                    <hr />
                }
                <div class="row">
                    <div class="col-sm-12 form-group">
                        <a href="@ViewBag.ReturnUrl" class="btn btn-default">Cancel</a>
                        <a asp-action="Edit" asp-route-id="@Model.PositionId" asp-route-returnUrl="@ViewBag.ReturnUrl" class="btn btn-warning">Undo Changes</a>
                        <input type="submit" value="Save Changes" class="btn btn-primary" />
                        <a asp-action="Delete" asp-route-id="@Model.PositionId" class="btn btn-danger pull-right">Delete</a>
                    </div>
                </div>
            </div>
        </form>
    </div>
</div>

<script type="text/javascript">
    $(document).ready(function () {
        // invoke the Lineup selector on page load
        $('input[type=text],input[type=radio],input[type=checkbox],textarea,select,input[type=email],input[type=number]').each(function () {
            var req = $(this).attr('data-val-required');
            var exclude = $(this).attr('data-exclude');
            if (undefined != req && undefined == exclude) {
                var label = $('label[for="' + $(this).attr('id') + '"]');
                var text = label.text();
                if (text.length > 0) {
                    label.append('<span style="color:red"> *</span>');
                }
            }
        });
        if(!document.getElementById('IsManager').checked && !document.getElementById('IsAssistantManager').checked){
            $.get("/Positions/GetPositionLineupViewComponent", { componentId: $("#ParentComponentId").val(), positionBeingEditedId: $("#PositionId").val() }, function (data) {
                $("#lineupSelectionTarget").html(data);
                document.getElementById('lineupMoveUp').addEventListener('click', handleLineupMoveUp, false);
                document.getElementById('lineupMoveDown').addEventListener('click', handleLineupMoveDown, false);
            });
        }


        var removeButtons = document.getElementsByClassName('unassignButton');
        [].forEach.call(removeButtons, function (elem) {
            elem.addEventListener('click', handleUnassignMemberClick, false);
        });
        document.getElementById('addSelectedMemberButton').addEventListener('click', handleAssignMemberClick, false)

        function handleUnassignMemberClick(e){
            var memberNumber = e.currentTarget.dataset.membernumber;
            var memberToRemove = document.getElementById("memberLineupItem-" + memberNumber);
            var memberList = memberToRemove.parentElement;
            memberList.removeChild(memberToRemove);
            if (memberList.children.length == 0) {
                var noMembersItem = document.createElement("li");
                noMembersItem.id = "noMembersItem";
                noMembersItem.appendChild(document.createTextNode("No Members Assigned"));
                memberList.appendChild(noMembersItem);
            }
        }

        function handleAssignMemberClick(e){
            var position = @Model.PositionId;
            var memberId = $("#AvailableMembers").val();
            var memberName = $("#AvailableMembers option:selected").text();
            var memberList = document.getElementById("memberLineup");
            var noMembersItem = document.getElementById("noMembersItem");
            if (noMembersItem != null) {
                memberList.removeChild(noMembersItem);
            }
            var currentMemberCount = $("#memberLineup li").length;
            var currentMembers = document.getElementsByClassName("memberLineupItem");
            for (var i = 0; i < currentMembers.length; i++){
                if (currentMembers[i].dataset.memberid == memberId) {
                    $("#AvailableMembersMessage").text("Selected Member is already assigned to this position.")
                    return;
                }
            }
            if (currentMemberCount > 0 && document.getElementById("IsUnique").checked) {
                while (memberList.firstChild) {
                    memberList.removeChild(memberList.firstChild);
                }
                currentMemberCount = currentMemberCount - 1;
            }
            // list item
            var newMemberListItem = document.createElement("li");
            newMemberListItem.classList.add("memberLineupItem");
            newMemberListItem.id = "memberLineupItem-" + currentMemberCount;
            newMemberListItem.dataset.memberid = memberId;
            // remove button
            var newRemoveButton = document.createElement("button");
            newRemoveButton.type = "button";
            newRemoveButton.classList.add("btn", "btn-small", "btn-danger", "unassignButton" );
            newRemoveButton.dataset.membernumber = currentMemberCount;
            newRemoveButton.dataset.positionid = position;
            newRemoveButton.dataset.memberid = memberId;
            newRemoveButton.addEventListener('click', handleUnassignMemberClick, false);
            // glyphicon
            var glyphicon = document.createElement("i");
            glyphicon.classList.add("glyphicon", "glyphicon-remove");
            newRemoveButton.appendChild(glyphicon);
            newMemberListItem.appendChild(newRemoveButton);
            // name span
            var nameSpan = document.createElement("span");
            nameSpan.appendChild(document.createTextNode(" " + memberName));
            newMemberListItem.appendChild(nameSpan);
            // hidden inputs
            var memberIdInput = document.createElement("input");
            memberIdInput.type = "hidden";
            memberIdInput.dataset.val = "true";
            memberIdInput.id = "CurrentMembers_" + currentMemberCount + "__MemberId";
            memberIdInput.name = "CurrentMembers[" + currentMemberCount + "].MemberId";
            memberIdInput.value = memberId;
            newMemberListItem.appendChild(memberIdInput);

            var memberNameInput = document.createElement("input");
            memberNameInput.type = "hidden";
            memberNameInput.dataset.val = "true";
            memberNameInput.id = "CurrentMembers_" + currentMemberCount + "__MemberName";
            memberNameInput.name = "CurrentMembers[" + currentMemberCount + "].MemberName";
            memberNameInput.value = memberName;
            newMemberListItem.appendChild(memberNameInput);

            memberList.appendChild(newMemberListItem);

        }
        $("#AvailableMembers").on('change', function () {
            $("#AvailableMembersMessage").text("");
        });

        $("#ParentComponentId").on('change', function () {
            if (this.value != null && !document.getElementById('IsManager').checked) {
                // retrieve the Lineup Interface view Component
                var container = $("#lineupSelectionTarget").empty();
                document.getElementById("lineupWait").style.display = "block";
                $.get("/Positions/GetPositionLineupViewComponent", { componentId: this.value, positionBeingEditedId: $("#PositionId").val() }, function (data) {
                    document.getElementById("lineupWait").style.display = "none";
                    container.html(data);
                    document.getElementById('lineupMoveUp').addEventListener('click', handleLineupMoveUp, false);
                    document.getElementById('lineupMoveDown').addEventListener('click', handleLineupMoveDown, false);
                    $("#LineupPosition").val($("#newPositionInsert").index());

                });
            }
        });
        $("#IsManager").on('change', function () {
            console.log("ParentComponent value is: " + $("#ParentComponentId").val());
            console.log("LineupBox isEmpty? " + $("#lineupSelectionTarget").is(':empty'));
            console.log("Initial LineupPosition is: " + $("#LineupPosition").val());
            if (this.checked) {
                $("#lineupSelectionTarget").empty();
                $("#IsAssistantManager").prop("checked", false);
                $("#LineupPosition").val(0);
            }
            else if ($("#ParentComponentId").val() != null && $("#lineupSelectionTarget").is(':empty')) {
                var container = $("#lineupSelectionTarget").empty();
                console.log("Attempting to repoll ViewComponent");
                document.getElementById("lineupWait").style.display = "block";
                $.get("/Positions/GetPositionLineupViewComponent", { componentId: $("#ParentComponentId").val(), positionBeingEditedId: $("#PositionId").val() }, function (data) {
                    document.getElementById("lineupWait").style.display = "none";
                    container.html(data);
                    document.getElementById('lineupMoveUp').addEventListener('click', handleLineupMoveUp, false);
                    document.getElementById('lineupMoveDown').addEventListener('click', handleLineupMoveDown, false);
                    console.log("Re-polled Lineup, reset Lineup index is: " + $("#newPositionInsert").index());
                    $("#LineupPosition").val($("#newPositionInsert").index());
                    console.log("Lineup Position reset to: " + $("#LineupPosition").val());
                });
            }            
        });
        $("#IsAssistantManager").on('change', function () {
            console.log("ParentComponent value is: " + $("#ParentComponentId").val());
            console.log("LineupBox isEmpty? " + $("#lineupSelectionTarget").is(':empty'));
            console.log("Initial LineupPosition is: " + $("#LineupPosition").val());
            if (this.checked) {
                // if assistant manager is checked, determine if the Component has a Manager, and set the LineupPosition to just below the manager if so
                var lineupBox = document.getElementById("lineupSelection");
                if (lineupBox){
                    var lineupItems = lineupBox.getElementsByTagName("li");
                    var managerPresent = false;
                    var currentPosition = $("#PositionId").val();
                    for (var i = 0; i < lineupItems.length; i++){
                        if (lineupItems[i].dataset.ismanager == "True" && lineupItems[i].dataset.positionid != currentPosition){
                            managerPresent = true;
                        }
                    }
                    if (managerPresent == true){
                        console.log("Manager Position is present.");
                        $("#LineupPosition").val(1); // if there is a Manager, then set this position to index 1. The Manager will always be index 0
                        console.log("LineupPosition set to: " + $("#LineupPosition").val());
                    }
                    else{
                        console.log("Manager Position not present");
                        $("#LineupPosition").val(0); // if no Manager, then this position should be at the Top of the Lineup in lieu of a manager
                        console.log("LineupPosition set to: " + $("#LineupPosition").val());
                    }
                    $("#lineupSelectionTarget").empty();
                }
                // clear the lineup box... we will need to re-poll the lineup from the server to reset the lineup properly if the Assistant Manager box is unchecked later
                $("#IsManager").prop("checked", false); // ensure that the "Manager" Position is unchecked.
                
            }
            else if ($("#ParentComponentId").val() != null && $("#lineupSelectionTarget").is(':empty')) {
                var container = $("#lineupSelectionTarget").empty();
                console.log("Attempting to repoll ViewComponent");
                document.getElementById("lineupWait").style.display = "block";
                $.get("/Positions/GetPositionLineupViewComponent", { componentId: $("#ParentComponentId").val(), positionBeingEditedId: $("#PositionId").val() }, function (data) {
                    document.getElementById("lineupWait").style.display = "none";
                    container.html(data);
                    document.getElementById('lineupMoveUp').addEventListener('click', handleLineupMoveUp, false);
                    document.getElementById('lineupMoveDown').addEventListener('click', handleLineupMoveDown, false);
                    console.log("Re-polled Lineup, reset Lineup index is: " + $("#newPositionInsert").index());
                    $("#LineupPosition").val($("#newPositionInsert").index());
                    console.log("Lineup Position reset to: " + $("#LineupPosition").val());
                });
            }
            
        });

        $("#IsUnique").on('change', function () {
            if (this.checked) {
                $("#currentMembersSubText").text(" (This is a unique position, so only a single member can be assigned.)");
                var memberList = document.getElementById("memberLineup");
                while (memberList.childNodes.length > 1) {
                    memberList.removeChild(memberList.lastChild);
                }
                var noMembersItem = document.createElement("li");
                noMembersItem.id = "noMembersItem";
                noMembersItem.appendChild(document.createTextNode("No Members Assigned"));
                memberList.appendChild(noMembersItem);
            }
            else {
                $("#currentMembersSubText").text(" (Multiple members can be assigned.)");

            }
        });

        function handleLineupMoveUp() {
            // Grab the <ul>,
            // Find the "newPositionInsert"
            // move it up on the <ul>
            // update the #LineupPosition value to the new value
            var list = document.getElementById("lineupSelection");
            var newItem = document.getElementById('newPositionInsert');
            var previousItem = newItem.previousElementSibling;
            console.log("Manager dataset is : " + previousItem.dataset.ismanager);
            if (previousItem.dataset.ismanager != "True") {
                // move the newInsert item up the list
                list.insertBefore(newItem, previousItem);
                // set the form field to the new position index
                $("#LineupPosition").val($("#newPositionInsert").index());
                console.log("New item is now at position: " + $("#newPositionInsert").index());
            } else {
                console.log("Cant move above manager");
            }

        }

        function handleLineupMoveDown() {
            var list = document.getElementById("lineupSelection");
            var newItem = document.getElementById('newPositionInsert');
            var nextItem = newItem.nextElementSibling;
            // check if the item is already at the bottom of the list
            if (nextItem) {
                // move the newInsert item up the list
                list.insertBefore(nextItem, newItem);
                // set the form field to the new position index
                $("#LineupPosition").val($("#newPositionInsert").index());
                console.log("New item is now at position: " + $("#newPositionInsert").index());
            } else {
                console.log("Item is already at the bottom of the list at position: " + $("#newPositionInsert").index());
            }
        }
    });

</script>
