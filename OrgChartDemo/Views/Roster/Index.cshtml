@model RosterManagerViewModel
@{
    ViewData["Title"] = "Index";
    Layout = "_OrgChartLayout";
}

<h3>Manage Roster</h3>
<div class="form-inline">
    <div class="form-group">
        @Html.LabelFor(x => Model.SelectedComponentId, htmlAttributes: new { @class = "control-label" })
        @Html.DropDownListFor(x => Model.SelectedComponentId, new SelectList(Model.Components, "Id", "ComponentName"), htmlAttributes: new { @class = "form -control", id = "Component" })
        @Html.ValidationMessageFor(x => x.SelectedComponentId, "", new { @class = "text-danger" })
    </div>
    <div class="form-group">
        <input type="button" value="Submit" class="get-btn btn-default" id="getComponentButton" />
    </div>
</div>
<br />
<div id="rosterContainer" class="container">


</div>
<script type="text/javascript">
    $(document).ready(function () {

        // Drag and Drop
        var dragSrcEl = null;
        var dragSrcParentComponentId = null;
        function handleDragStart(e) {
            // Target (this) element is the source node.
            dragSrcEl = this;
            dragSrcParentComponentId = this.parentElement.dataset.parentcomponentid;
            e.dataTransfer.effectAllowed = 'move';
            e.dataTransfer.setData('text', this.outerHTML);
            this.classList.add('dragElem');
            var dragGhost = document.createElement("div")
            dragGhost.className = "dragGhost-member";
            dragGhost.style.width = "" + this.offsetWidth + "px";
            dragGhost.innerHTML = this.innerHTML;
            dragGhost.style.opacity = 1;
            document.body.appendChild(dragGhost);
            var posX = $(this).offset().left, posY = $(this).offset().top;
            e.dataTransfer.setDragImage(dragGhost, (e.pageX - posX), (e.pageY - posY));
        }
        function handleDragOver(e) {
            if (e.preventDefault) {
                e.preventDefault(); // Necessary. Allows us to drop.
            }
            this.classList.add('over');

            e.dataTransfer.dropEffect = 'move';  // See the section on the DataTransfer object.
            return false;
        }
        function handleDragEnter(e) {
            // this / e.target is the current hover target.
        }
        function handleDragLeave(e) {
            this.classList.remove('over');  // this / e.target is previous target element.
        }
        function handleDrop(e) {
            // this/e.target is current target element.
            if (e.stopPropagation) {
                e.stopPropagation(); // Stops some browsers from redirecting.
            }
            // Don't do anything if dropping the same column we're dragging.
            if (dragSrcEl != this && e.target.childElementCount == 0) {
                // Set the source column's HTML to the HTML of the column we dropped on.
                dragSrcEl.parentNode.removeChild(dragSrcEl);
                var dropHTML = e.dataTransfer.getData('text');
                this.insertAdjacentHTML('beforeend', dropHTML);

                var dropElem = document.getElementById(this.id).lastChild;
                addDnDHandlers(dropElem);
                var moreOptionsButton = dropElem.querySelectorAll('.moreOptions')[0];
                addShowMoreOptionsHandler(moreOptionsButton);
                var moreOptionsReassignEmployee = dropElem.querySelectorAll('.drag-options-reassign')[0];
                addMoreOptionsReassignEmployeeHandler(moreOptionsReassignEmployee);
                var moreOptionsEditMember = dropElem.querySelectorAll('.drag-options-edit')[0];
                addMoreOptionsEditMemberHandler(moreOptionsEditMember);
                // find: MemberID of dragged member, PositionID of new position.
                var newPositionId = e.target.dataset.positionid;
                var memberId = dragSrcEl.dataset.memberid;
                reassignMember(memberId, newPositionId);
            }
            this.classList.remove('over');
            return false;
        }
        function handleDragEnd(e) {
            // this/e.target is the source node.
            this.classList.remove('over');
            var ghosts = document.getElementsByClassName("dragGhost-member");
            [].forEach.call(ghosts, function (elem) {
                elem.parentNode.removeChild(elem);
            })
        }
        function addDnDHandlers(elem) {
            console.log("Adding handlers to: " + elem);
            elem.addEventListener('dragstart', handleDragStart, false);
            elem.addEventListener('dragenter', handleDragEnter, false)
            elem.addEventListener('dragover', handleDragOver, false);
            elem.addEventListener('dragleave', handleDragLeave, false);
            elem.addEventListener('drop', handleDrop, false);
            elem.addEventListener('dragend', handleDragEnd, false);
        }
        var cols = document.querySelectorAll('.members .member');
        [].forEach.call(cols, addDnDHandlers);

        // attempt drag scroll
        var stop = true;
        $(".draggable").on("drag", function (e) {
            stop = true;
            if (e.originalEvent.clientY < 150) {
                stop = false;
                scroll(-1)
            }
            if (e.originalEvent.clientY > ($(window).height() - 150)) {
                stop = false;
                scroll(1)
            }
        });

        $(".draggable").on("dragend", function (e) {
            stop = true;
        });
        var scroll = function (step) {
            var scrollY = $(window).scrollTop();
            $(window).scrollTop(scrollY + step);
            if (!stop) {
                setTimeout(function () { scroll(step) }, 20);
            }
        }
        function addShowMoreOptionsHandler(elem) {
            elem.addEventListener('click', showMoreOptions, false);
            elem.parentElement.parentElement.querySelectorAll(".drag-options")[0].addEventListener('mouseleave', handleMouseOut, false);
        }
        function addMoreOptionsReassignEmployeeHandler(elem) {
            elem.addEventListener('click', handleMoreOptionsReassignEmployeeClick, false);
        }
        function addMoreOptionsEditMemberHandler(elem) {
            elem.addEventListener('click', handleMoreOptionsEditMemberClick, false);
        }
        function showMoreOptions(e) {
            var memberId = $(e.target).data('memberid');
            console.log('More options clicked for Member: ' + memberId);
            $("#options_" + memberId).toggleClass("active");
        }
        function handleMouseOut(elem) {
            this.classList.remove("active");
        }
        function reassignMember(memberId, newPositionId) {
            $.get("/Roster/ReassignMember", { memberId : memberId, positionId : newPositionId, selectedComponentId: $("#Component").val() }, function (data) {
                // check if a DemoRefresh has been returned
                if (data.demoDictionary) {
                    console.log("Refreshing DemoTable");
                    for (var key in data.demoDictionary) {
                        // skip loop if the property is from prototype
                        if (!data.demoDictionary.hasOwnProperty(key)) continue;
                        var obj = data.demoDictionary[key];
                        $(key).html(obj);
                    }
                }
                // check if we need to refresh the entire RosterManager 
                else if (data.status == "RefreshRosterManager") {
                    // if so, manually trigger the click event for the getComponentButton
                    console.log("Refreshing RosterManager");
                    $("#getComponentButton").trigger('click');
                }                
            });
        }
        function handleMoreOptionsReassignEmployeeClick(e) {
            // retrieve the Member that we want to transfer
            var memberId = $(e.target).data('memberid');
            // clear any extant modal from the modal container
            var container = $("#modalTarget").empty();
            // retrieve the ReassignEmployee from the server
            $.get("Roster/GetReassignMemberViewComponent", { memberId: memberId }, function (data) {
                // inject the ViewComponent HTML into the modal container
                container.html(data);
                // register the Modal's event handlers
                var submitButton = document.getElementById("reassignEmployeeModalSubmit");
                submitButton.addEventListener('click', handleReassignEmployeeModalSubmit, false);
                $("#reassignEmployeeModal").modal("show");
            })            
        }

        function handleAddNewPositionButtonClick(e) {
            // retrieve the Component to which we want to add a position
            var componentId = e.target.dataset.componentid;           
            // clear any extant modal from the modal container
            var container =$("#modalTarget").empty();
            // retrieve the AddPositionModal from the server
            $.get('Roster/GetAddPositionToComponentViewComponent', { componentId: componentId }, function (data) {
                // inject the ViewComponent HTML into the modal container
                container.html(data);
                // register the Modal's event handlers
                var submitButton = document.getElementById("addPositionToComponentModalSubmit");
                submitButton.addEventListener('click', handleAddPositionToComponentModalSubmit, false);
                // show the modal
                $("#addPositionToComponentModal").modal("show");
            })
        }

        function handleMoreOptionsEditMemberClick(e) {
            // retrieve the MemberId of the member we want to edit
            var member = e.target.dataset.memberid;
            // clear any existing modals from the container
            var container = $("#modalTarget").empty();
            // retrieve the EditEmployeeModal from the server
            $.get('Roster/GetEditEmployeeModalViewComponent', { memberId: member }, function (data) {
                // inject the ViewComponent HTML into the modal container
                container.html(data);
                // register the Modal's event handlers
                var submitButton = document.getElementById("editMemberModalSubmit");
                submitButton.addEventListener('click', handleEditEmployeeSubmitButtonClick, false);
                // show the modal
                $("#editMemberModal").modal("show");
            })
        }

        function handleReassignEmployeeModalSubmit() {
            var form = $("#reassignEmployeeModalForm");
            if ($("#PositionId").children("option:selected").val() == ""){
                $("#warning").text("Please select a Position")
                return;
            }
            $.ajax({
                url: form.attr('action'),
                type: form.attr('method'),
                dataType: 'html',
                data: form.serialize(),
                success: function () {
                    $("#reassignEmployeeModal").modal("hide");
                    $("#getComponentButton").trigger('click');
                }
            });
        }

        function handleAddPositionToComponentModalSubmit() {
            var form = $("#addPositionToComponentModalForm");
            
            $.ajax({
                url: form.attr('action'),
                type: form.attr('method'),
                dataType: 'html',
                data: form.serialize(),
                success: function (response) {
                    // the server will return a {Status = "Success"} object if validation passes.
                    // this is passed from a method with an IActionResult return type, which means
                    // it needs to be parsed before the properties are accessible
                    var responseObj = JSON.parse(response);
                    if (responseObj["status"] === "Success") {
                        $("#addPositionToComponentModal").modal("hide");
                        $("#getComponentButton").trigger('click');
                    }
                    else {
                        // hide the original modal
                        $("#addPositionToComponentModal").modal("hide");
                        // manually remove the modal backdrop... i don't know why it isn't removed via .modal("hide")
                        var backdrop = document.getElementsByClassName("modal-backdrop fade in");
                        [].forEach.call(backdrop, function (elem) {
                            elem.parentNode.removeChild(elem);
                        })
                        $("#modalTarget").html(response);
                        var submitButton = document.getElementById("addPositionToComponentModalSubmit");
                        submitButton.addEventListener('click', handleAddPositionToComponentModalSubmit, false);
                        $("#addPositionToComponentModal").modal("show");
                    }                    
                },                
            });
        }

        function handleEditEmployeeSubmitButtonClick() {
            var form = $("#editMemberModalForm");
            if ($("#MemberRank").children("option:selected").val() == "") {
                $("#warning").text("Please select a Rank")
                return;
            }
            else if ($("#MemberGender").children("option:selected").val() == "") {
                $("#warning").text("Please select a Gender")
                return;
            }
            else if ($("#DutyStatusId").children("option:selected").val() == "") {
                $("#warning").text("Please select a Duty Status")
                return;
            }
            else if ($("#MemberRace").children("option:selected").val() == "") {
                $("#warning").text("Please select a Race")
                return;
            }
            $.ajax({
                url: form.attr('action'),
                type: form.attr('method'),
                dataType: 'html',
                data: form.serialize(),
                success: function (response) {
                    // the server will return a {Status = "Success"} object if validation passes.
                    // this is passed from a method with an IActionResult return type, which means
                    // it needs to be parsed before the properties are accessible
                    var responseObj = JSON.parse(response);
                    if (responseObj["status"] === "Success") {                    
                        // TODO: return new Member info
                        $("#editMemberModal").modal("hide");
                        $("#getComponentButton").trigger('click');
                    }
                    // if the return does not have {Status = "Success"}, we assume validation failed and the response
                    // payload is a new ViewComponent with Model Validation messages
                    else {
                        // hide the original modal
                        $("#editMemberModal").modal("hide");
                        // manually remove the modal backdrop... i don't know why it isn't removed via .modal("hide")
                        var backdrop = document.getElementsByClassName("modal-backdrop fade in");
                        [].forEach.call(backdrop, function (elem) {
                            elem.parentNode.removeChild(elem);
                        })
                        // re-inject the new Modal content
                        $("#modalTarget").html(response);
                        // register the new Modal submit button handler
                        var submitButton = document.getElementById("editMemberModalSubmit");
                        submitButton.addEventListener('click', handleAddPositionToComponentModalSubmit, false);
                        // show the Modal
                        $("#editMemberModal").modal("show");
                    }
                },
            });
        }        

        $("#getComponentButton").click(function () {
            var selectedComponentId = $("#Component").children("option:selected").val();
            //$.getJSON("/Roster/GetComponents", { componentId: selectedComponentId }, function (source) {});
            var container = $("#rosterContainer");
            $.get("/Roster/GetRosterViewComponent", { componentId: selectedComponentId }, function (data) {
                container.html(data);
                console.log("Grabbing new elements");
                var draggables = document.querySelectorAll('.members .member');
                console.log("Attempting to register click events: " + draggables);
                [].forEach.call(draggables, function (elem) {
                    console.log("Adding handlers to: " + elem);
                    elem.addEventListener('dragstart', handleDragStart, false);
                    elem.addEventListener('dragenter', handleDragEnter, false)
                    elem.addEventListener('dragover', handleDragOver, false);
                    elem.addEventListener('dragleave', handleDragLeave, false);
                    elem.addEventListener('drop', handleDrop, false);
                    elem.addEventListener('dragend', handleDragEnd, false);
                });
                var moreOptionButtons = document.querySelectorAll('.moreOptions');
                [].forEach.call(moreOptionButtons, function (elem) {
                    elem.addEventListener('click', showMoreOptions, false);                    
                });
                var moreOptionDivs = document.querySelectorAll('.drag-options');
                [].forEach.call(moreOptionDivs, function (elem) {
                    elem.addEventListener('mouseleave', handleMouseOut, false);
                })
                var droppables = document.querySelectorAll('.members .insertable');
                [].forEach.call(droppables, function (elem) {
                    elem.addEventListener('dragenter', handleDragEnter, false)
                    elem.addEventListener('dragover', handleDragOver, false);
                    elem.addEventListener('dragleave', handleDragLeave, false);
                    elem.addEventListener('drop', handleDrop, false);
                    elem.addEventListener('dragend', handleDragEnd, false);
                })
                var moreOptionsReassign = document.querySelectorAll('.drag-options-reassign');
                [].forEach.call(moreOptionsReassign, function (elem) {
                    elem.addEventListener('click', handleMoreOptionsReassignEmployeeClick, false);
                })
                var addNewPositionButtons = document.querySelectorAll('#addNewPositionButton');
                [].forEach.call(addNewPositionButtons, function (elem) {
                    elem.addEventListener('click', handleAddNewPositionButtonClick, false);
                })
                var moreOptionsEdit = document.querySelectorAll('.drag-options-edit');
                [].forEach.call(moreOptionsEdit, function (elem) {
                    elem.addEventListener('click', handleMoreOptionsEditMemberClick, false);
                })
            });
        });        
    });
</script>
