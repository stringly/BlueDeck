@model ComponentWithComponentListViewModel

<h4>Component</h4>
<hr />
<div class="row">
    <div class="col-md-4">
        <form asp-action="Edit">
            <div asp-validation-summary="ModelOnly" class="text-danger"></div>
            <input type="hidden" asp-for="ComponentId" />
            @Html.HiddenFor(model => model.LineupPosition)
            <input type="hidden" asp-for="ComponentId" />
            <div class="form-group">
                <label asp-for="ComponentName" class="control-label"></label>
                <input asp-for="ComponentName" class="form-control" />
                <span asp-validation-for="ComponentName" class="text-danger"></span>
            </div>
            <div class="form-group">
                <label asp-for="ParentComponentId" class="control-label"></label>
                @Html.DropDownListFor(model => model.ParentComponentId,
                                                new SelectList(Model.Components, "Id", "ComponentName"),
                                                "Choose Parent Component",
                                                new { @class = "form-control" })
                <span asp-validation-for="ParentComponentId" class="text-danger"></span>
            </div>
            <div id="lineupSelectionTarget"></div>
            <div class="form-group">
                <label asp-for="Acronym" class="control-label"></label>
                <input asp-for="Acronym" class="form-control" />
                <span asp-validation-for="Acronym" class="text-danger"></span>
            </div>
            <div class="form-group">
                <input type="submit" value="Save" class="btn btn-default" />
            </div>
        </form>
    </div>
</div>
<div>
    <a asp-action="Index">Back to List</a>
</div>
<script type="text/javascript">
    // I need an onchange event for the ParentComponentId select
    $(document).ready(function () {
        // invoke the Lineup selector on page load
        $.get("/Components/GetComponentLineupViewComponent", { parentComponentId: $("#ParentComponentId").val(), componentBeingEditedId: $("#ComponentId").val() }, function (data) {
            $("#lineupSelectionTarget").html(data);
            document.getElementById('lineupMoveUp').addEventListener('click', handleLineupMoveUp, false);
            document.getElementById('lineupMoveDown').addEventListener('click', handleLineupMoveDown, false);
        });
        $("#ParentComponentId").on('change', function () {
            // retrieve the Lineup Interface view Component
            var container = $("#lineupSelectionTarget").empty();
            $.get("/Components/GetComponentLineupViewComponent", { parentComponentId: this.value, componentBeingEditedId: $("#ComponentId").val() }, function (data) {
                container.html(data);
                document.getElementById('lineupMoveUp').addEventListener('click', handleLineupMoveUp, false);
                document.getElementById('lineupMoveDown').addEventListener('click', handleLineupMoveDown, false);
                $("#LineupPosition").val($("#newComponentInsert").index());
            });
        });
        function handleLineupMoveUp() {
            // Grab the <ul>,
            // Find the "newPositionInsert"
            // move it up on the <ul>
            // update the #LineupPosition value to the new value
            var list = document.getElementById("lineupSelection");
            var newItem = document.getElementById('newComponentInsert');
            var previousItem = newItem.previousElementSibling;
            if (previousItem) {
                list.insertBefore(newItem, previousItem);
                $("#LineupPosition").val($("#newComponentInsert").index());
                console.log("New item is now at position: " + $("#newComponentInsert").index());
            } else {
                console.log("Item is already at the top of the list at position: " + $("#newComponentInsert").index());
            }
        }

        function handleLineupMoveDown() {
            var list = document.getElementById("lineupSelection");
            var newItem = document.getElementById('newComponentInsert');
            var nextItem = newItem.nextElementSibling;
            // check if the item is already at the bottom of the list
            if (nextItem) {
                // move the newInsert item up the list
                list.insertBefore(nextItem, newItem);
                // set the form field to the new position index
                $("#LineupPosition").val($("#newComponentInsert").index());
                console.log("New item is now at position: " + $("#newComponentInsert").index());
            } else {
                console.log("Item is already at the bottom of the list at position: " + $("#newComponentInsert").index());
            }
        }
    });

</script>
