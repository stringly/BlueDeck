@model PositionWithComponentListViewModel
@{
    ViewData["Title"] = "Edit Position";
}



<div class="col-xs-12 col-md-10 col-md-offset-1 col-lg-8 col-lg-offset-2 formContainer">
    <div class="formHeader">
        <h2 class="formHeader-heading">Create a Position</h2>
        <p class="formHeader-description">
            A Position represents a role in a Component to which Members can be assigned.
        </p>
        <div>
            <a asp-action="Index"><i class="ion-md-arrow-round-back"></i> Back to List</a>
        </div>
    </div>
    <div class="row">
        <div class="col-md-12 col-sm-12 col-xs-12">
            <form asp-action="Edit">
                <div asp-validation-summary="ModelOnly" class="text-danger"></div>
                <input type="hidden" asp-for="PositionId" />
                @Html.HiddenFor(model => model.LineupPosition);
            
                <div class="col-md-12">
                    <div class="row">
                        <div class="col-sm-5 form-group">
                            <label asp-for="PositionName" class="control-label"></label>
                            <input asp-for="PositionName" class="form-control" />
                            <span asp-validation-for="PositionName" class="text-danger"></span>
                        </div>
                        <div class="col-sm-3 form-group">
                            <label asp-for="Callsign" class="control-label"></label>
                            <input asp-for="Callsign" class="form-control" />
                            <span asp-validation-for="Callsign" class="text-danger"></span>
                        </div>
                        <div class="col-sm-4 form-group">
                            <label asp-for="JobTitle" class="control-label"></label>
                            <input asp-for="JobTitle" class="form-control" />
                            <span asp-validation-for="JobTitle" class="text-danger"></span>
                        </div>
                    </div>
                    <hr />
                    <div class="row">
                        <div class="col-sm-10 form-group" style="margin-bottom:0px">
                            <div class="form-checkbox">
                                <label>
                                    <input asp-for="IsUnique" /> @Html.DisplayNameFor(model => model.IsUnique)
                                </label>
                                <span class="note">
                                    Only a single Member can be assigned.
                                </span>
                            </div>
                        </div>
                        <div class="col-sm-10 form-group" style="margin-bottom:0px">
                            <div class="form-checkbox">
                                <label>
                                    <input asp-for="IsManager" /> @Html.DisplayNameFor(model => model.IsManager)
                                </label>
                                <span class="note">
                                    This Position will be the Manager for it's Component.
                                </span>
                            </div>
                        </div>
                    </div>
                    <hr />
                    <div class="row">
                        <div class="col-sm-4 form-group">
                            <label asp-for="ParentComponentId" class="control-label"></label>
                            @Html.DropDownListFor(model => model.ParentComponentId,
                                                            new SelectList(Model.Components, "Id", "ComponentName"),
                                                            "Choose Parent Component",
                                                            new { @class = "form-control" })
                            <span asp-validation-for="ParentComponentId" class="text-danger"></span>
                        </div>
                        <div id="lineupSelectionTarget"></div>
                    </div>
                    <hr />
                    <div class="row">
                        <div class="col-sm-4 form-group">
                            <input type="submit" value="Save Changes" class="btn btn-default" />
                        </div>
                    </div>
                </div>
            </form>
        </div>
    </div>
</div>

<script type="text/javascript">
    $(document).ready(function () {
        // invoke the Lineup selector on page load
        $.get("/Positions/GetPositionLineupViewComponent", { componentId: $("#ParentComponentId").val(), positionBeingEditedId: $("#PositionId").val() }, function (data) {
            $("#lineupSelectionTarget").html(data);
            document.getElementById('lineupMoveUp').addEventListener('click', handleLineupMoveUp, false);
            document.getElementById('lineupMoveDown').addEventListener('click', handleLineupMoveDown, false);
        });

        $("#ParentComponentId").on('change', function () {
            if (this.value != null && !document.getElementById('IsManager').checked) {
                // retrieve the Lineup Interface view Component
                var container = $("#lineupSelectionTarget").empty();
                $.get("/Positions/GetPositionLineupViewComponent", { componentId: this.value, positionBeingEditedId: $("#PositionId").val() }, function (data) {
                    container.html(data);
                    document.getElementById('lineupMoveUp').addEventListener('click', handleLineupMoveUp, false);
                    document.getElementById('lineupMoveDown').addEventListener('click', handleLineupMoveDown, false);
                    $("#LineupPosition").val($("#newPositionInsert").index());
                });
            }
        });
        $("#IsManager").on('change', function () {
            console.log("ParentComponent value is: " + $("#ParentComponentId").val());
            console.log("LineupBox isEmpty? " + $("#lineupSelectionTarget").is(':empty'));
            if (this.checked) {
                $("#lineupSelectionTarget").empty();
                $("#LineupPosition").val(0);
            }
            else if ($("#ParentComponentId").val() != null && $("#lineupSelectionTarget").is(':empty')) {
                var container = $("#lineupSelectionTarget").empty();
                console.log("Attempting to repoll ViewComponent");
                $.get("/Positions/GetPositionLineupViewComponent", { componentId: $("#ParentComponentId").val(), positionBeingEditedId: $("#PositionId").val() }, function (data) {
                    container.html(data);
                    document.getElementById('lineupMoveUp').addEventListener('click', handleLineupMoveUp, false);
                    document.getElementById('lineupMoveDown').addEventListener('click', handleLineupMoveDown, false);
                    $("#LineupPosition").val($("#newPositionInsert").index());
                });
            }

        })

        function handleLineupMoveUp() {
            // Grab the <ul>,
            // Find the "newPositionInsert"
            // move it up on the <ul>
            // update the #LineupPosition value to the new value
            var list = document.getElementById("lineupSelection");
            var newItem = document.getElementById('newPositionInsert');
            var previousItem = newItem.previousElementSibling;
            console.log("Manager dataset is : " + previousItem.dataset.ismanager);
            if (previousItem.dataset.ismanager != "True") {
                // move the newInsert item up the list
                list.insertBefore(newItem, previousItem);
                // set the form field to the new position index
                $("#LineupPosition").val($("#newPositionInsert").index());
                console.log("New item is now at position: " + $("#newPositionInsert").index());
            } else {
                console.log("Cant move above manager");
            }

        }

        function handleLineupMoveDown() {
            var list = document.getElementById("lineupSelection");
            var newItem = document.getElementById('newPositionInsert');
            var nextItem = newItem.nextElementSibling;
            // check if the item is already at the bottom of the list
            if (nextItem) {
                // move the newInsert item up the list
                list.insertBefore(nextItem, newItem);
                // set the form field to the new position index
                $("#LineupPosition").val($("#newPositionInsert").index());
                console.log("New item is now at position: " + $("#newPositionInsert").index());
            } else {
                console.log("Item is already at the bottom of the list at position: " + $("#newPositionInsert").index());
            }
        }






    });

</script>
